---
title: "TheKidsBiostatsTemplate"
subtitle: "A biostatistics report template"
author:
  name: "J Smith, Biostatistician"
  affiliation:
  - "The Kids Research Institute Australia, Perth, WA, Australia"
date: "`r format(Sys.time(), '%d %B %Y')`"
title-block-banner: "#1F3B73"
format:
  html:
    embed-resources: true
    code-fold: true
    toc: true
    toc-location: left
    html-table-processing: none
    self-contained: true
    mainfont: "Barlow"
    include-in-header: 
      text: |
        <style>
          @import url('https://fonts.googleapis.com/css2?family=Barlow&display=swap');
        </style>
reference-location: margin 
citation-location: margin 
css: _extensions/html/styles.css
editor_options: 
  chunk_output_type: inline
execute:
  echo: true
  warning: false
  error: true
callout-icon: false
---

```{r}
#| code-fold: false
library(thekidsbiostats)
```

Use `mtcars` as validation:

```{r}
#| code-fold: false
dat <- mtcars %>% head(n = 10)
```


# a) Testing Error/Warning Messages

## 1) Font fallback

Barlow is installed on this system, so it should show up by default.

```{r}
#| code-fold: false

dat %>%
  thekids_table()
```
::: column-margin
Indeed.
:::

Now specify a non-standard font not installed on my system:

```{r message=TRUE}
#| code-fold: false

dat %>%
  thekids_table(font_family = "xyz")
```
::: column-margin
Sans looks to have worked here.
:::

## 2) Colours

Specifying a "The Kids" colour:

```{r}
dat %>%
  thekids_table(colour = "Saffron")
```

Specifying a non "The Kids" colour:

```{r message=TRUE, warning=TRUE}
#| code-fold: false
dat %>%
  thekids_table(colour = "Orange")
```
::: column-margin
Nice.
:::

## 3) Zebra + Highlight

```{r message=TRUE, warning=TRUE}
#| code-fold: false
dat %>%
  thekids_table(zebra = TRUE, highlight = c(1, 2, 3))
```
::: column-margin
Nice.
:::

## 4) Highlighting row outside of the table

```{r}
#| code-fold: false
dat %>%
  thekids_table(highlight = 11)
```

## 5) Class `knitr_kable` tables

```{r}
dat %>%
  knitr::kable() %>%
  thekids_table()
```
::: column-margin
Nice.
:::

## 6) Non-natural number selected

```{r}
#| code-fold: false

dat %>%
  thekids_table(highlight = 1.2)
```

```{r}
#| code-fold: false

dat %>%
  thekids_table(highlight = -1)
```

```{r}
#| code-fold: false

dat %>%
  thekids_table(highlight = 0)
```

## 7) Class `flextable` objects

```{r warning=TRUE}
#| code-fold: false

dat %>%
  flextable() %>%
  thekids_table()
```


## 8) `kable` tables

If `kable()` is called, an error should be returned if `format="html"` is not specified.

```{r}
#| code-fold: false

dat %>%
  knitr::kable() %>%
  thekids_table()
```

What about if `format="latex"` is specified?

```{r}
#| code-fold: false

dat %>%
  rownames_to_column() %>%
  knitr::kable(format = "latex") %>%
  thekids_table()
```



# b) Check `flextable_default` handling

First, extract out the existing flextable defaults:

```{r}
#| code-fold: false

get_flextable_defaults()
```

Therefore:

```{r}
#| code-fold: false

dat %>%
  flextable()
```

Now, let's globally set a flextable default:

```{r}
#| code-fold: false

set_flextable_defaults(font.size = 5 # Arbitrarily small font size
                       )

get_flextable_defaults()
```

Therefore:

```{r}
#| code-fold: false

dat %>%
  flextable()
```

Now, with these **global** flextable defaults set, let's use `thekids_table`:

```{r}
#| code-fold: false

dat %>%
  thekids_table()
```

Now, let's check the global flextable defaults to ensure what we originally set are preserved (i.e., with `font.size=5`):

```{r}
#| code-fold: false

get_flextable_defaults()
```

And, to be sure, plot another flextable:

```{r}
#| code-fold: false

dat %>%
  flextable()
```


::: callout-note
Success!
:::

```{r}
init_flextable_defaults() # Preserve existing flextable defaults
```


# c) Parsing Formatted `flextable`

Start with this:

```{r}
#| code-fold: false
dat %>%
  flextable() %>%
  flextable::highlight(j = 5, color = "yellow") %>%
  bold(i = 6, j = 3, bold = TRUE) %>%
  color(i = 6, j = 3, color = "red")
```
::: column-margin
+ Highlight the values of the `drat` (rear axle ratio) volumn.
+ Make one value of `disp` red.
:::

Now applying `thekids_table`:

```{r}
#| code-fold: false
dat %>%
  flextable() %>%
  highlight(j = 5, color = "yellow") %>%
  bold(i = 6, j = 3, bold = TRUE) %>%
  color(i = 6, j = 3, color = "red") %>%
  thekids_table()
```
::: column-margin
+ **This does not look to work.**
  + This is because the global flextable defaults are confused.
    + Defaults can only be set **once**--strictly *before* the flextable is created.
    + By calling `flextable` first, we are using the globally set flextable defaults which `thekids_table` cannot override.
  + Understandably, the "red" `disp` cell is now black.
    + See line 110 of `thekids_table.R`--forces font colour to be `#111921` in body.
:::

If we instead call `thekids_table` first, we can still apply the required formatting.

```{r}
#| code-fold: false

dat %>%
  thekids_table() %>%
  highlight(j = 5, color = "yellow") %>%
  bold(i = 6, j = 3, bold = TRUE) %>%
  color(i = 6, j = 3, color = "red")
```

# d) Check functionalities

## 1) Highlight

```{r}
#| code-fold: true
dat %>%
  thekids_table(highlight = c(1, 7, 9))
```

## 2) Zebra

```{r}
#| code-fold: false

dat %>%
  thekids_table(zebra = TRUE, colour = "Saffron")
```

## 3) Other parameters to `set_flextable_defaults`

Start with our "standard" table:
  
```{r}
#| code-fold: false

dat %>%
  thekids_table(colour = "AzureBlue")
```

Now, set `padding.top` and `padding.bottom`:

```{r}
#| code-fold: false

dat %>%
  thekids_table(colour = "AzureBlue",
                padding.top = 10,
                padding.bottom = 10)
```

# e) Check date parsing

Simulate some date data:

```{r}
#| code-fold: false
set.seed(123)

dat2 <- tibble(row = 1:10) %>%
  select(-row) %>%
  bind_cols(
    map_dfc(1:15, ~ tibble(!!paste0("date", .x) := 
      as.Date("2020-01-01") + sample(0:1825, 10, replace = TRUE)))
  ) %>%
  mutate(strata = sample(1:5, n(), replace = TRUE),
         .before = 1)
```

## 1) Dataframes

Now, see how our package handles this:

```{r}
#| code-fold: false
dat2 %>%
  thekids_table(date_fix = F)
```
::: column-margin
All staggered over 2 lines---ugly!
:::

Now, setting `date_fix=T` (default):

```{r}
#| code-fold: false

dat2 %>%
  thekids_table(date_fix = TRUE)
```
::: column-margin
Nice!
:::

## 2) `tbl_summary`

Stratifying by `strata` with `date_fix=F`:

```{r}
#| code-fold: false
dat2 %>%
  select(1:5) %>%
  tbl_summary(by = strata,
              statistic = all_continuous() ~ "{mean} ({min}, {max})") %>%
  thekids_table(date_fix = F)
```

Stratifying by `strata` with `date_fix=T`:

```{r}
#| code-fold: false
dat2 %>%
  select(1:5) %>%
  tbl_summary(by = strata,
              statistic = all_continuous() ~ "{mean} ({min}, {max})") %>%
  thekids_table(date_fix = T)
```
::: column-margin
Better! There is no splitting within a date.
:::

## 3) `tbl_strata`

With `date_fix=F`:

```{r}
dat2 %>%
  pivot_longer(date1:date3, names_to = 'type', values_to = 'date') %>%
  select(strata, type, date) %>%
  tbl_strata(strata = strata,
             .tbl_fun = ~.x %>%
               tbl_summary(by = type,
                           statistic = all_continuous() ~ "{mean} ({min}, {max})")) %>%
  thekids_table(date_fix = F)
```

With `date_fix=T`:

```{r}
dat2 %>%
  pivot_longer(date1:date3, names_to = 'type', values_to = 'date') %>%
  select(strata, type, date) %>%
  tbl_strata(strata = strata,
             .tbl_fun = ~.x %>%
               tbl_summary(by = type,
                           statistic = all_continuous() ~ "{mean} ({min}, {max})")) %>%
  thekids_table(date_fix = T)
```


# f) Check all supported table classes function as expected

## 1) `gtsummary`

### 1.1) `tbl_summary`

```{r}
#| code-fold: false
dat %>%
  tbl_summary(by = cyl,
              type = list(c(mpg, disp, hp, drat, wt, qsec) ~ "continuous")) %>%
  modify_spanning_header(all_stat_cols() ~ "Number of Cylinders") %>%
  thekids_table(highlight = 5)
```

### 1.2) `tbl_strata`

```{r}
#| code-fold: false

dat %>%
  mutate(am = fct_case_when(am == 0 ~ "Automatic",
                            am == 1 ~ "Manual")) %>%
  tbl_strata(strata = am,
             .tbl_fun = ~.x %>%
               tbl_summary(by = cyl,
                           type = list(c(mpg, disp, hp, drat, wt, qsec) ~ "continuous"))) %>%
  thekids_table(highlight = 5)
```

### 1.3) `tbl_merge`

```{r}
#| code-fold: false

tab1 <- dat %>%
  filter(am == 0) %>%
  tbl_summary(by = cyl,
              type = list(c(mpg, disp, hp, drat, wt, qsec) ~ "continuous"))

tab2 <- dat %>%
  filter(am == 1) %>%
  tbl_summary(by = cyl,
              type = list(c(mpg, disp, hp, drat, wt, qsec) ~ "continuous"))

tbl_merge(tbls = list(tab1, tab2), 
          tab_spanner = c("Automatic", "Manual")) %>%
  thekids_table(highlight = 5)
```

### 1.4) `tbl_stack`

```{r}
#| code-fold: false

tab1 <- dat %>%
  select(cyl, mpg, disp, hp) %>%
  tbl_summary(by = cyl,
              type = everything() ~ "continuous")

tab2 <- dat %>%
  select(cyl, drat, wt, qsec) %>%
  tbl_summary(by = cyl,
              type = everything() ~ "continuous")

tbl_stack(tbls = list(tab1, tab2)) %>%
  thekids_table(highlight = 5)
```

## 2) `kable`

We muist ensure the "rowname to column" functionality works.

### 2.1) `kable`

```{r warning=TRUE}
#| code-fold: false

dat %>%
  knitr::kable(format = "html") %>%
  thekids_table()
```

### 2.2) `kableExtra`

Should work irrespective of whether `format="html"` is specified or not.

```{r warning=TRUE}
#| code-fold: false

dat %>%
  knitr::kable(format = "html") %>%
  kableExtra::kable_styling() %>%
  thekids_table()
```

```{r}
#| code-fold: false

dat %>%
  knitr::kable() %>%
  kableExtra::kable_styling()# %>%
  thekids_table()
```

## Reproducibility Information

```{r}
sessionInfo()
```

